// Mocks generated by Mockito 5.4.5 from annotations
// in moods_on_display/test/album_mock/album_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i9;
import 'dart:io' as _i4;
import 'dart:typed_data' as _i8;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:moods_on_display/managers/services/services.dart' as _i5;
import 'package:photo_manager/photo_manager.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSize_0 extends _i1.SmartFake implements _i2.Size {
  _FakeSize_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_1 extends _i1.SmartFake implements Duration {
  _FakeDuration_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLatLng_3 extends _i1.SmartFake implements _i3.LatLng {
  _FakeLatLng_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAssetEntity_4 extends _i1.SmartFake implements _i3.AssetEntity {
  _FakeAssetEntity_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_5 extends _i1.SmartFake implements _i4.File {
  _FakeFile_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_6 extends _i1.SmartFake implements Uri {
  _FakeUri_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_7 extends _i1.SmartFake implements _i4.Directory {
  _FakeDirectory_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_8 extends _i1.SmartFake
    implements _i4.FileSystemEntity {
  _FakeFileSystemEntity_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_9 extends _i1.SmartFake
    implements _i4.RandomAccessFile {
  _FakeRandomAccessFile_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_10 extends _i1.SmartFake implements _i4.IOSink {
  _FakeIOSink_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_11 extends _i1.SmartFake implements _i4.FileStat {
  _FakeFileStat_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PhotoManagerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoManagerService extends _i1.Mock
    implements _i5.PhotoManagerService {
  MockPhotoManagerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PermissionState> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i6.Future<_i3.PermissionState>.value(
              _i3.PermissionState.notDetermined,
            ),
          )
          as _i6.Future<_i3.PermissionState>);
}

/// A class which mocks [AssetEntityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetEntityService extends _i1.Mock
    implements _i5.AssetEntityService {
  MockAssetEntityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.AssetEntity?> fromId(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fromId, [id]),
            returnValue: _i6.Future<_i3.AssetEntity?>.value(),
          )
          as _i6.Future<_i3.AssetEntity?>);
}

/// A class which mocks [AssetEntity].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockAssetEntity extends _i1.Mock implements _i3.AssetEntity {
  MockAssetEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  int get subtype =>
      (super.noSuchMethod(Invocation.getter(#subtype), returnValue: 0) as int);

  @override
  int get typeInt =>
      (super.noSuchMethod(Invocation.getter(#typeInt), returnValue: 0) as int);

  @override
  int get duration =>
      (super.noSuchMethod(Invocation.getter(#duration), returnValue: 0) as int);

  @override
  int get width =>
      (super.noSuchMethod(Invocation.getter(#width), returnValue: 0) as int);

  @override
  int get height =>
      (super.noSuchMethod(Invocation.getter(#height), returnValue: 0) as int);

  @override
  int get orientation =>
      (super.noSuchMethod(Invocation.getter(#orientation), returnValue: 0)
          as int);

  @override
  bool get isFavorite =>
      (super.noSuchMethod(Invocation.getter(#isFavorite), returnValue: false)
          as bool);

  @override
  _i6.Future<String> get titleAsync =>
      (super.noSuchMethod(
            Invocation.getter(#titleAsync),
            returnValue: _i6.Future<String>.value(
              _i7.dummyValue<String>(this, Invocation.getter(#titleAsync)),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<String> get titleAsyncWithSubtype =>
      (super.noSuchMethod(
            Invocation.getter(#titleAsyncWithSubtype),
            returnValue: _i6.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.getter(#titleAsyncWithSubtype),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i3.AssetType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i3.AssetType.other,
          )
          as _i3.AssetType);

  @override
  bool get isLivePhoto =>
      (super.noSuchMethod(Invocation.getter(#isLivePhoto), returnValue: false)
          as bool);

  @override
  int get orientatedWidth =>
      (super.noSuchMethod(Invocation.getter(#orientatedWidth), returnValue: 0)
          as int);

  @override
  int get orientatedHeight =>
      (super.noSuchMethod(Invocation.getter(#orientatedHeight), returnValue: 0)
          as int);

  @override
  _i2.Size get orientatedSize =>
      (super.noSuchMethod(
            Invocation.getter(#orientatedSize),
            returnValue: _FakeSize_0(this, Invocation.getter(#orientatedSize)),
          )
          as _i2.Size);

  @override
  _i6.Future<_i4.File?> get file =>
      (super.noSuchMethod(
            Invocation.getter(#file),
            returnValue: _i6.Future<_i4.File?>.value(),
          )
          as _i6.Future<_i4.File?>);

  @override
  _i6.Future<_i4.File?> get fileWithSubtype =>
      (super.noSuchMethod(
            Invocation.getter(#fileWithSubtype),
            returnValue: _i6.Future<_i4.File?>.value(),
          )
          as _i6.Future<_i4.File?>);

  @override
  _i6.Future<_i4.File?> get originFile =>
      (super.noSuchMethod(
            Invocation.getter(#originFile),
            returnValue: _i6.Future<_i4.File?>.value(),
          )
          as _i6.Future<_i4.File?>);

  @override
  _i6.Future<_i4.File?> get originFileWithSubtype =>
      (super.noSuchMethod(
            Invocation.getter(#originFileWithSubtype),
            returnValue: _i6.Future<_i4.File?>.value(),
          )
          as _i6.Future<_i4.File?>);

  @override
  _i6.Future<_i8.Uint8List?> get originBytes =>
      (super.noSuchMethod(
            Invocation.getter(#originBytes),
            returnValue: _i6.Future<_i8.Uint8List?>.value(),
          )
          as _i6.Future<_i8.Uint8List?>);

  @override
  _i6.Future<_i8.Uint8List?> get thumbnailData =>
      (super.noSuchMethod(
            Invocation.getter(#thumbnailData),
            returnValue: _i6.Future<_i8.Uint8List?>.value(),
          )
          as _i6.Future<_i8.Uint8List?>);

  @override
  Duration get videoDuration =>
      (super.noSuchMethod(
            Invocation.getter(#videoDuration),
            returnValue: _FakeDuration_1(
              this,
              Invocation.getter(#videoDuration),
            ),
          )
          as Duration);

  @override
  _i2.Size get size =>
      (super.noSuchMethod(
            Invocation.getter(#size),
            returnValue: _FakeSize_0(this, Invocation.getter(#size)),
          )
          as _i2.Size);

  @override
  DateTime get createDateTime =>
      (super.noSuchMethod(
            Invocation.getter(#createDateTime),
            returnValue: _FakeDateTime_2(
              this,
              Invocation.getter(#createDateTime),
            ),
          )
          as DateTime);

  @override
  DateTime get modifiedDateTime =>
      (super.noSuchMethod(
            Invocation.getter(#modifiedDateTime),
            returnValue: _FakeDateTime_2(
              this,
              Invocation.getter(#modifiedDateTime),
            ),
          )
          as DateTime);

  @override
  _i6.Future<bool> get exists =>
      (super.noSuchMethod(
            Invocation.getter(#exists),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<String?> get mimeTypeAsync =>
      (super.noSuchMethod(
            Invocation.getter(#mimeTypeAsync),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<_i3.AssetEntity?> obtainForNewProperties() =>
      (super.noSuchMethod(
            Invocation.method(#obtainForNewProperties, []),
            returnValue: _i6.Future<_i3.AssetEntity?>.value(),
          )
          as _i6.Future<_i3.AssetEntity?>);

  @override
  _i6.Future<int> durationWithOptions({bool? withSubtype = false}) =>
      (super.noSuchMethod(
            Invocation.method(#durationWithOptions, [], {
              #withSubtype: withSubtype,
            }),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<bool> isLocallyAvailable({
    bool? isOrigin = false,
    bool? withSubtype = false,
    _i3.PMDarwinAVFileType? darwinFileType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#isLocallyAvailable, [], {
              #isOrigin: isOrigin,
              #withSubtype: withSubtype,
              #darwinFileType: darwinFileType,
            }),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i3.LatLng> latlngAsync() =>
      (super.noSuchMethod(
            Invocation.method(#latlngAsync, []),
            returnValue: _i6.Future<_i3.LatLng>.value(
              _FakeLatLng_3(this, Invocation.method(#latlngAsync, [])),
            ),
          )
          as _i6.Future<_i3.LatLng>);

  @override
  _i6.Future<_i4.File?> loadFile({
    bool? isOrigin = true,
    bool? withSubtype = false,
    _i3.PMProgressHandler? progressHandler,
    _i3.PMDarwinAVFileType? darwinFileType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadFile, [], {
              #isOrigin: isOrigin,
              #withSubtype: withSubtype,
              #progressHandler: progressHandler,
              #darwinFileType: darwinFileType,
            }),
            returnValue: _i6.Future<_i4.File?>.value(),
          )
          as _i6.Future<_i4.File?>);

  @override
  _i6.Future<_i8.Uint8List?> thumbnailDataWithSize(
    _i3.ThumbnailSize? size, {
    _i3.ThumbnailFormat? format = _i3.ThumbnailFormat.jpeg,
    int? quality = 100,
    _i3.PMProgressHandler? progressHandler,
    int? frame = 0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #thumbnailDataWithSize,
              [size],
              {
                #format: format,
                #quality: quality,
                #progressHandler: progressHandler,
                #frame: frame,
              },
            ),
            returnValue: _i6.Future<_i8.Uint8List?>.value(),
          )
          as _i6.Future<_i8.Uint8List?>);

  @override
  _i6.Future<_i8.Uint8List?> thumbnailDataWithOption(
    _i3.ThumbnailOption? option, {
    _i3.PMProgressHandler? progressHandler,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #thumbnailDataWithOption,
              [option],
              {#progressHandler: progressHandler},
            ),
            returnValue: _i6.Future<_i8.Uint8List?>.value(),
          )
          as _i6.Future<_i8.Uint8List?>);

  @override
  _i6.Future<String?> getMediaUrl({_i3.PMProgressHandler? progressHandler}) =>
      (super.noSuchMethod(
            Invocation.method(#getMediaUrl, [], {
              #progressHandler: progressHandler,
            }),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i3.AssetEntity copyWith({
    String? id,
    int? typeInt,
    int? width,
    int? height,
    int? duration,
    int? orientation,
    bool? isFavorite,
    String? title,
    int? createDateSecond,
    int? modifiedDateSecond,
    String? relativePath,
    double? latitude,
    double? longitude,
    String? mimeType,
    int? subtype,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#copyWith, [], {
              #id: id,
              #typeInt: typeInt,
              #width: width,
              #height: height,
              #duration: duration,
              #orientation: orientation,
              #isFavorite: isFavorite,
              #title: title,
              #createDateSecond: createDateSecond,
              #modifiedDateSecond: modifiedDateSecond,
              #relativePath: relativePath,
              #latitude: latitude,
              #longitude: longitude,
              #mimeType: mimeType,
              #subtype: subtype,
            }),
            returnValue: _FakeAssetEntity_4(
              this,
              Invocation.method(#copyWith, [], {
                #id: id,
                #typeInt: typeInt,
                #width: width,
                #height: height,
                #duration: duration,
                #orientation: orientation,
                #isFavorite: isFavorite,
                #title: title,
                #createDateSecond: createDateSecond,
                #modifiedDateSecond: modifiedDateSecond,
                #relativePath: relativePath,
                #latitude: latitude,
                #longitude: longitude,
                #mimeType: mimeType,
                #subtype: subtype,
              }),
            ),
          )
          as _i3.AssetEntity);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i4.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_5(this, Invocation.getter(#absolute)),
          )
          as _i4.File);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i7.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_6(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i4.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_7(this, Invocation.getter(#parent)),
          )
          as _i4.Directory);

  @override
  _i6.Future<_i4.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_5(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_5(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  _i4.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_5(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i4.File);

  @override
  _i6.Future<_i4.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i6.Future<_i4.FileSystemEntity>.value(
              _FakeFileSystemEntity_8(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i6.Future<_i4.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i4.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_5(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  _i4.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_5(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i4.File);

  @override
  _i6.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i6.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i6.Future<DateTime>.value(
              _FakeDateTime_2(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i6.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_2(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i6.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i6.Future<DateTime>.value(
              _FakeDateTime_2(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i6.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_2(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i6.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i4.RandomAccessFile> open({
    _i4.FileMode? mode = _i4.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i6.Future<_i4.RandomAccessFile>.value(
              _FakeRandomAccessFile_9(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i6.Future<_i4.RandomAccessFile>);

  @override
  _i4.RandomAccessFile openSync({_i4.FileMode? mode = _i4.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_9(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i4.RandomAccessFile);

  @override
  _i6.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i6.Stream<List<int>>.empty(),
          )
          as _i6.Stream<List<int>>);

  @override
  _i4.IOSink openWrite({
    _i4.FileMode? mode = _i4.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_10(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i4.IOSink);

  @override
  _i6.Future<_i8.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i6.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i6.Future<_i8.Uint8List>);

  @override
  _i8.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i8.Uint8List(0),
          )
          as _i8.Uint8List);

  @override
  _i6.Future<String> readAsString({
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i6.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String readAsStringSync({_i9.Encoding? encoding = const _i9.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i6.Future<List<String>> readAsLines({
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i6.Future<_i4.File> writeAsBytes(
    List<int>? bytes, {
    _i4.FileMode? mode = _i4.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_5(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i4.FileMode? mode = _i4.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i4.File> writeAsString(
    String? contents, {
    _i4.FileMode? mode = _i4.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i6.Future<_i4.File>.value(
              _FakeFile_5(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i6.Future<_i4.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i4.FileMode? mode = _i4.FileMode.write,
    _i9.Encoding? encoding = const _i9.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i6.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i6.Future<_i4.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i6.Future<_i4.FileStat>.value(
              _FakeFileStat_11(this, Invocation.method(#stat, [])),
            ),
          )
          as _i6.Future<_i4.FileStat>);

  @override
  _i4.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_11(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i4.FileStat);

  @override
  _i6.Stream<_i4.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i6.Stream<_i4.FileSystemEvent>.empty(),
          )
          as _i6.Stream<_i4.FileSystemEvent>);
}
